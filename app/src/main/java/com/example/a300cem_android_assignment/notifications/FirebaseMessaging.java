package com.example.a300cem_android_assignment.notifications;import android.app.Notification;import android.app.NotificationChannel;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.Intent;import android.media.RingtoneManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.util.Log;import androidx.annotation.RequiresApi;import androidx.core.app.NotificationCompat;import com.example.a300cem_android_assignment.CallApi;import com.example.a300cem_android_assignment.Dashboard;import com.example.a300cem_android_assignment.GroupChatActivity;import com.example.a300cem_android_assignment.Session.SessionManagement;import com.example.a300cem_android_assignment.models.ModelChatroom;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.messaging.FirebaseMessagingService;import com.google.firebase.messaging.RemoteMessage;import org.json.JSONException;import org.json.JSONObject;public class FirebaseMessaging extends FirebaseMessagingService {    int userID;    ModelChatroom modelChatroom;    @RequiresApi(api = Build.VERSION_CODES.O)    @Override    public void onMessageReceived(RemoteMessage remoteMessage) {        super.onMessageReceived(remoteMessage);        SessionManagement sessionManagement = new SessionManagement(FirebaseMessaging.this);        userID = sessionManagement.getSession();        String sent = remoteMessage.getData().get("sent");        String user = remoteMessage.getData().get("user");        Log.e("dataChat",remoteMessage.getData().toString());       // ModelChatroom chatroom = remoteMessage.getData().get("chatroom");        FirebaseAuth mAuth = FirebaseAuth.getInstance();        FirebaseUser fuser = mAuth.getCurrentUser();        if (fuser != null) {            // do your stuff        } else {            mAuth.signInAnonymously();        }        String userIDString =  Integer.toString(userID);        if(sent.equals(userIDString)){            if(!userIDString.equals(user)){               if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                   Log.d("remoteMessage34","GO/");                   sendNormalNatification(remoteMessage);               }else{                   System.out.println("here done");                   sendOAndAboveNotification(remoteMessage);               }           }        }    }    private void sendNormalNatification(RemoteMessage remoteMessage) {        String user = remoteMessage.getData().get("user");        String icon = remoteMessage.getData().get("icon");        String title = remoteMessage.getData().get("title");        String body = remoteMessage.getData().get("body");        String chatroom = remoteMessage.getData().get("chatroom");        RemoteMessage.Notification notification = remoteMessage.getNotification();        int i = Integer.parseInt(user.replaceAll("[\\D]", ""));        getCurrentRoomInfo(chatroom);        System.out.println(modelChatroom.toString());        Intent intent = new Intent(this, GroupChatActivity.class);        intent.putExtra("currentChatroom", modelChatroom);        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);        PendingIntent pendingIntent = PendingIntent.getActivity(this, i, intent, PendingIntent.FLAG_ONE_SHOT);        Uri defSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);        NotificationCompat.Builder builder = new NotificationCompat.Builder(this)                        .setSmallIcon(Integer.parseInt(icon))                        .setContentText(body)                        .setContentTitle(title)                        .setSound(defSoundUri)                        .setContentIntent(pendingIntent);        NotificationManager mNotifyMgr =                (NotificationManager) getSystemService(NOTIFICATION_SERVICE);        int j = 0;        if(i > 0){            j = i;        }        mNotifyMgr.notify(j, builder.build());    }    @RequiresApi(api = Build.VERSION_CODES.O)    private void sendOAndAboveNotification(RemoteMessage remoteMessage) {        String user = remoteMessage.getData().get("user");        String icon = remoteMessage.getData().get("icon");        String title = remoteMessage.getData().get("title");        String body = remoteMessage.getData().get("body");        RemoteMessage.Notification notification = remoteMessage.getNotification();        int i = Integer.parseInt(user.replaceAll("[\\D]", ""));        Intent intent = new Intent(this, GroupChatActivity.class);        Bundle bundle = new Bundle();        bundle.putString(" ",user);//chatroom id        intent.putExtras(bundle);        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);        PendingIntent pendingIntent = PendingIntent.getActivity(this, i, intent, PendingIntent.FLAG_ONE_SHOT);        Uri defSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);        OreoAndAboveNotification notification1 = new OreoAndAboveNotification(this);        Notification.Builder builder = notification1.getONotifications(title, body, pendingIntent,defSoundUri,icon);        int j = 0;        if(i > 0){            j = i;        }        notification1.getManager().notify(j, builder.build());    }    private void getCurrentRoomInfo(String id){        CallApi callApi = new CallApi();        callApi.json_get(new CallApi.VolleyCallback() {            @Override            public void onSuccessResponse(JSONObject response) throws JSONException {                SetcurrentChatRoomInfo(response.getJSONObject("data"));            }        },"/chatrooms/querybyId/"+ Integer.parseInt(id));    }    private void SetcurrentChatRoomInfo(JSONObject result) throws JSONException {        modelChatroom = new ModelChatroom();        modelChatroom.setChatroom_id(result.getInt("chatroom_id"));;        modelChatroom.setCreated_by(result.getInt("created_by"));        modelChatroom.setChartroom_name(result.getString("chatroom_name"));        modelChatroom.setChatroom_desc(result.getString("chatroom_desc"));        modelChatroom.setChatroom_icon(result.getString("chatroom_image"));        modelChatroom.setChatroom_icon(result.getString("created_at"));    }}